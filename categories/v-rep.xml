<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>PauLoMarconi (Posts about V-rep)</title><link>https://paulomarconi.github.io/</link><description></description><atom:link href="https://paulomarconi.github.io/categories/v-rep.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2025 &lt;a href="mailto:p.lomarconi@sheffield.ac.uk, prlomarconi@gmail.com"&gt;Paulo Loma Marconi&lt;/a&gt; 
&lt;a rel="license" href="https://creativecommons.org/licenses/by-nc-sa/4.0/"&gt;
&lt;img alt="Creative Commons License BY-NC-SA"
style="border-width:0; margin-bottom:12px;"
src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"&gt;&lt;/a&gt;</copyright><lastBuildDate>Sat, 10 May 2025 18:09:52 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Simple foraging and random aggregation strategy for swarm robotics without communication</title><link>https://paulomarconi.github.io/blog/Foraging_Aggregation_V-rep_e-puck/</link><dc:creator>Paulo Loma Marconi</dc:creator><description>&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2&gt;Table of Contents&lt;span class="tocSkip"&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;div class="toc"&gt;&lt;ul class="toc-item"&gt;&lt;li&gt;&lt;span&gt;&lt;a data-toc-modified-id="Simple-Foraging-and-Random-Aggregation-Strategy-for-swarm-robotics-without-communication-1" href="https://paulomarconi.github.io/blog/Foraging_Aggregation_V-rep_e-puck/#Simple-Foraging-and-Random-Aggregation-Strategy-for-swarm-robotics-without-communication"&gt;&lt;span class="toc-item-num"&gt;1  &lt;/span&gt;Simple Foraging and Random Aggregation Strategy for swarm robotics without communication&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;&lt;a data-toc-modified-id="Pre-requisites-2" href="https://paulomarconi.github.io/blog/Foraging_Aggregation_V-rep_e-puck/#Pre-requisites"&gt;&lt;span class="toc-item-num"&gt;2  &lt;/span&gt;Pre-requisites&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;&lt;a data-toc-modified-id="Source-code-3" href="https://paulomarconi.github.io/blog/Foraging_Aggregation_V-rep_e-puck/#Source-code"&gt;&lt;span class="toc-item-num"&gt;3  &lt;/span&gt;Source code&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;&lt;a data-toc-modified-id="Problem-formulation-4" href="https://paulomarconi.github.io/blog/Foraging_Aggregation_V-rep_e-puck/#Problem-formulation"&gt;&lt;span class="toc-item-num"&gt;4  &lt;/span&gt;Problem formulation&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;&lt;a data-toc-modified-id="Foraging-and-Random-Aggregation-5" href="https://paulomarconi.github.io/blog/Foraging_Aggregation_V-rep_e-puck/#Foraging-and-Random-Aggregation"&gt;&lt;span class="toc-item-num"&gt;5  &lt;/span&gt;Foraging and Random Aggregation&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;&lt;a data-toc-modified-id="Unicycle-model-6" href="https://paulomarconi.github.io/blog/Foraging_Aggregation_V-rep_e-puck/#Unicycle-model"&gt;&lt;span class="toc-item-num"&gt;6  &lt;/span&gt;Unicycle model&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;&lt;a data-toc-modified-id="Rebound-avoider/follower-algorithm-7" href="https://paulomarconi.github.io/blog/Foraging_Aggregation_V-rep_e-puck/#Rebound-avoider/follower-algorithm"&gt;&lt;span class="toc-item-num"&gt;7  &lt;/span&gt;Rebound avoider/follower algorithm&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;&lt;a data-toc-modified-id="Search-blob/ePuck-algorithm-8" href="https://paulomarconi.github.io/blog/Foraging_Aggregation_V-rep_e-puck/#Search-blob/ePuck-algorithm"&gt;&lt;span class="toc-item-num"&gt;8  &lt;/span&gt;Search blob/ePuck algorithm&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;&lt;a data-toc-modified-id="Results-and-discussion-9" href="https://paulomarconi.github.io/blog/Foraging_Aggregation_V-rep_e-puck/#Results-and-discussion"&gt;&lt;span class="toc-item-num"&gt;9  &lt;/span&gt;Results and discussion&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;&lt;a data-toc-modified-id="Lua-code-of-the-algorithm-10" href="https://paulomarconi.github.io/blog/Foraging_Aggregation_V-rep_e-puck/#Lua-code-of-the-algorithm"&gt;&lt;span class="toc-item-num"&gt;10  &lt;/span&gt;Lua code of the algorithm&lt;/a&gt;&lt;/span&gt;&lt;ul class="toc-item"&gt;&lt;li&gt;&lt;span&gt;&lt;a data-toc-modified-id="Edit-the-controller-10.1" href="https://paulomarconi.github.io/blog/Foraging_Aggregation_V-rep_e-puck/#Edit-the-controller"&gt;&lt;span class="toc-item-num"&gt;10.1  &lt;/span&gt;Edit the controller&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;&lt;a data-toc-modified-id="Save-the-output-data-10.2" href="https://paulomarconi.github.io/blog/Foraging_Aggregation_V-rep_e-puck/#Save-the-output-data"&gt;&lt;span class="toc-item-num"&gt;10.2  &lt;/span&gt;Save the output data&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;&lt;a data-toc-modified-id="References-11" href="https://paulomarconi.github.io/blog/Foraging_Aggregation_V-rep_e-puck/#References"&gt;&lt;span class="toc-item-num"&gt;11  &lt;/span&gt;References&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="Simple-Foraging-and-Random-Aggregation-Strategy-for-swarm-robotics-without-communication"&gt;Simple Foraging and Random Aggregation Strategy for swarm robotics without communication&lt;a class="anchor-link" href="https://paulomarconi.github.io/blog/Foraging_Aggregation_V-rep_e-puck/#Simple-Foraging-and-Random-Aggregation-Strategy-for-swarm-robotics-without-communication"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;In swarm robotics Foraging and Aggregation are basic tasks yet that can be challenging when there is no communication between the robots. This paper proposes a strategy using a Mealy Deterministic Finite State Machine (DFSM) that switches between five states with two different algorithms, the Rebound avoider/follower through proximity sensors, and the Search blob/ePuck using the 2D image processing of the ePuck embedded camera. Ten trials for each scenario are simulated on V-rep in order to analyse the performance of the strategy in terms of the mean and standard deviation.&lt;/p&gt;
&lt;h2 id="Pre-requisites"&gt;Pre-requisites&lt;a class="anchor-link" href="https://paulomarconi.github.io/blog/Foraging_Aggregation_V-rep_e-puck/#Pre-requisites"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Basic robotics theory.&lt;/li&gt;
&lt;li&gt;Finite State Machine theory.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.coppeliarobotics.com/download"&gt;V-rep proEdu v3.6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Knowledge in Lua progamming language.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="Source-code"&gt;Source code&lt;a class="anchor-link" href="https://paulomarconi.github.io/blog/Foraging_Aggregation_V-rep_e-puck/#Source-code"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Version &lt;a href="https://raw.githubusercontent.com/paulomarconi/Foraging_Aggregation_V-rep_e-puck/master/report/root.pdf"&gt;PDF&lt;/a&gt;/&lt;a href="https://paulomarconi.github.io/files/Foraging_Aggregation_V-rep_e-puck/Foraging_Aggregation_V-rep_e-puck.html"&gt;HTML&lt;/a&gt;. V-rep and LaTex source code on &lt;a href="https://github.com/paulomarconi/Foraging_Aggregation_V-rep_e-puck"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="Problem-formulation"&gt;Problem formulation&lt;a class="anchor-link" href="https://paulomarconi.github.io/blog/Foraging_Aggregation_V-rep_e-puck/#Problem-formulation"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The task is to design a control strategy​ for e-puck robots that do the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Explore the given environment to collect resources (​foraging​);&lt;/li&gt;
&lt;li&gt;While foraging, avoid collisions between robots and with the environment boundary.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For an object to be collected, a robot's centre must be within ​5 cm ​of the object's centre. There won't be any collisions between the robot and the object.
For the evaluation of this task, two foraging scenarios will be considered:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;With a​ &lt;strong&gt;single robot&lt;/strong&gt;​;&lt;/li&gt;
&lt;li&gt;With a​ &lt;strong&gt;group of 5 robots​&lt;/strong&gt; (all with an identical controller).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The controller used for both scenarios ​MUST ​be the same.&lt;/p&gt;
&lt;p&gt;To assess the foraging performance of the strategy, it's expected to conduct &lt;strong&gt;​10 trials&lt;/strong&gt; per scenario.
Each trial should last &lt;strong&gt;​60 seconds&lt;/strong&gt; of simulation time. Show ​the &lt;strong&gt;number of objects collected in total over time&lt;/strong&gt; (average and standard deviation over 10 trials). Include ​one plot for each scenario​.&lt;/p&gt;
&lt;p&gt;Important:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Do not use wheel speeds the e-puck cannot achieve. That is, when using function &lt;code&gt;sim.setJointTargetVelocity(.,.)&lt;/code&gt;, ​make sure the velocity argument is bounded by &lt;code&gt;[-6.24, 6.24]​&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;You should use the sensors available on the e-puck platform (e.g. camera, proximity). You may implement additional sensors, however, these must not provide any global information (e.g. absolute position or orientation).&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;
&lt;img alt="scenario" src="https://paulomarconi.github.io/images/Foraging_Aggregation_V-rep_e-puck/scenario.png" width="40%"&gt;
&lt;center&gt;&lt;figcaption&gt;Simulation environment&lt;/figcaption&gt;&lt;/center&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="Foraging-and-Random-Aggregation"&gt;Foraging and Random Aggregation&lt;a class="anchor-link" href="https://paulomarconi.github.io/blog/Foraging_Aggregation_V-rep_e-puck/#Foraging-and-Random-Aggregation"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The DFSM diagram in Fig. 1, which is defined by (1) and (2), starts in the Behaviour state where the robot is set as $\textit{avoider}$ while the simulation time is $t\leq 60[s]$. During that time, the Foraging state looks for the green blobs with the Search blob/ePuck algorithm while avoiding obstacles using the Rebound algorithm. Moreover, a Random Movement state is used to introduce randomness to the system so the agent can take different paths if there is no blob or obstacle detection. For $60&amp;lt;t\leq 120$, the Behaviour of the robot is set to $\textit{follower}$ and switches to Random Aggregation state where it uses both algorithms, the Rebound to follow ePucks with the proximity sensors and the Search to look for the closest ePuck wheels. For both algorithms, the output is the angle of attack $\alpha_n$, where $n$ depends on the current state.&lt;/p&gt;
&lt;p&gt;\begin{align*}
S&amp;amp;=\lbrace B,F,R,A,Ra \rbrace  \tag{1}\\ 	
\varSigma&amp;amp;= \lbrace t\leq 60,60&amp;lt;t\leq 120,bl~\exists,bl~\nexists,ob~\exists,ob~\nexists,eP~\exists, eP~\nexists \rbrace \tag{2}\\
s_0&amp;amp;=\lbrace B \rbrace \\
\end{align*}&lt;/p&gt;
&lt;p&gt;where $S$ is the finite set of states, $\varSigma$ is the input alphabet, $\delta:S\times\varSigma$ is the state transition function, Table 1, $s_0$ is the initial state, $\exists$ and $\nexists$ mean detection and no detection respectively.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;center&gt;Table 1: State transition function $\delta$

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align:center"&gt;Input&lt;/th&gt;
&lt;th style="text-align:center"&gt;Current State&lt;/th&gt;
&lt;th style="text-align:center"&gt;Next State&lt;/th&gt;
&lt;th style="text-align:center"&gt;Output&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align:center"&gt;$t ≤ 60$&lt;/td&gt;
&lt;td style="text-align:center"&gt;&lt;strong&gt;B&lt;/strong&gt;ehaviour&lt;/td&gt;
&lt;td style="text-align:center"&gt;&lt;strong&gt;F&lt;/strong&gt;oraging&lt;/td&gt;
&lt;td style="text-align:center"&gt;avoider&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:center"&gt;$60 &amp;lt; t ≤ 120$&lt;/td&gt;
&lt;td style="text-align:center"&gt;&lt;strong&gt;B&lt;/strong&gt;ehaviour&lt;/td&gt;
&lt;td style="text-align:center"&gt;&lt;strong&gt;A&lt;/strong&gt;ggregation&lt;/td&gt;
&lt;td style="text-align:center"&gt;follower&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:center"&gt;&lt;strong&gt;bl&lt;/strong&gt;ob $\exists$&lt;/td&gt;
&lt;td style="text-align:center"&gt;&lt;strong&gt;F&lt;/strong&gt;oraging&lt;/td&gt;
&lt;td style="text-align:center"&gt;&lt;strong&gt;F&lt;/strong&gt;oraging&lt;/td&gt;
&lt;td style="text-align:center"&gt;$\alpha_C$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:center"&gt;&lt;strong&gt;bl&lt;/strong&gt;ob $\nexists$&lt;/td&gt;
&lt;td style="text-align:center"&gt;&lt;strong&gt;F&lt;/strong&gt;oraging&lt;/td&gt;
&lt;td style="text-align:center"&gt;&lt;strong&gt;Ra&lt;/strong&gt;ndom Movement&lt;/td&gt;
&lt;td style="text-align:center"&gt;$\alpha_{C_r}$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:center"&gt;&lt;strong&gt;ob&lt;/strong&gt;stacle $\exists$&lt;/td&gt;
&lt;td style="text-align:center"&gt;&lt;strong&gt;F&lt;/strong&gt;oraging&lt;/td&gt;
&lt;td style="text-align:center"&gt;&lt;strong&gt;R&lt;/strong&gt;ebound&lt;/td&gt;
&lt;td style="text-align:center"&gt;$\alpha_R$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:center"&gt;&lt;strong&gt;ob&lt;/strong&gt;stacle $\nexists$&lt;/td&gt;
&lt;td style="text-align:center"&gt;&lt;strong&gt;R&lt;/strong&gt;ebound&lt;/td&gt;
&lt;td style="text-align:center"&gt;&lt;strong&gt;F&lt;/strong&gt;oraging&lt;/td&gt;
&lt;td style="text-align:center"&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:center"&gt;&lt;strong&gt;ob&lt;/strong&gt;stacle $\exists$&lt;/td&gt;
&lt;td style="text-align:center"&gt;&lt;strong&gt;A&lt;/strong&gt;ggregation&lt;/td&gt;
&lt;td style="text-align:center"&gt;&lt;strong&gt;R&lt;/strong&gt;ebound&lt;/td&gt;
&lt;td style="text-align:center"&gt;$\alpha_R$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:center"&gt;&lt;strong&gt;ob&lt;/strong&gt;stacle $\nexists$&lt;/td&gt;
&lt;td style="text-align:center"&gt;&lt;strong&gt;R&lt;/strong&gt;ebound&lt;/td&gt;
&lt;td style="text-align:center"&gt;&lt;strong&gt;A&lt;/strong&gt;ggregation&lt;/td&gt;
&lt;td style="text-align:center"&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:center"&gt;&lt;strong&gt;eP&lt;/strong&gt;uck $\exists$&lt;/td&gt;
&lt;td style="text-align:center"&gt;&lt;strong&gt;A&lt;/strong&gt;ggregation&lt;/td&gt;
&lt;td style="text-align:center"&gt;&lt;strong&gt;A&lt;/strong&gt;ggregation&lt;/td&gt;
&lt;td style="text-align:center"&gt;$\alpha_e$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:center"&gt;&lt;strong&gt;eP&lt;/strong&gt;uck $\nexists$&lt;/td&gt;
&lt;td style="text-align:center"&gt;&lt;strong&gt;A&lt;/strong&gt;ggregation&lt;/td&gt;
&lt;td style="text-align:center"&gt;&lt;strong&gt;Ra&lt;/strong&gt;ndom Movement&lt;/td&gt;
&lt;td style="text-align:center"&gt;$\alpha_{e_r}$&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/center&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;figure&gt;
&lt;img alt="DFSM" src="https://paulomarconi.github.io/images/Foraging_Aggregation_V-rep_e-puck/DFSM.png" width="40%"&gt;
&lt;center&gt;&lt;figcaption&gt;Fig.1 Mealy DFSM of the controller. &lt;a href="https://github.com/paulomarconi/Foraging_Aggregation_V-rep_e-puck/blob/master/report/tikz/DFSM.tex"&gt;[Tikz version]&lt;/a&gt; &lt;/figcaption&gt;&lt;/center&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="Unicycle-model"&gt;Unicycle model&lt;a class="anchor-link" href="https://paulomarconi.github.io/blog/Foraging_Aggregation_V-rep_e-puck/#Unicycle-model"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The Unicycle model in Fig. 2a [1] controls the angular velocities of the right and left wheels, $v_r$ and $v_l$ as follows&lt;/p&gt;
&lt;p&gt;\begin{align}
v_r&amp;amp;= \dfrac{2~V_x+\omega~L}{2~R} \tag{3}\\
v_l&amp;amp;=\dfrac{2~V_x-\omega~L}{2~R} \tag{4}
\end{align}&lt;/p&gt;
&lt;p&gt;where $V_x$ is the linear velocity of the robot, $L$ is the distance between the wheels, $R$ is the radius of each wheel, and $\omega$ is the angular velocity of the robot. Using $\alpha_n$ and the simulation sampling period $T$, the control variable for the simulation is $\omega=\alpha_n/T$, refer to code line 24, 197, and 215.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="Rebound-avoider/follower-algorithm"&gt;Rebound avoider/follower algorithm&lt;a class="anchor-link" href="https://paulomarconi.github.io/blog/Foraging_Aggregation_V-rep_e-puck/#Rebound-avoider/follower-algorithm"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The Rebound algorithm [2] calculates the Rebound angle $\alpha_R$ to avoid/follow an obstacle/objective given $\alpha_0=\pi/N$ and $\alpha_i=i~\alpha_0$,&lt;/p&gt;
&lt;p&gt;\begin{align}\tag{5}
\alpha_R&amp;amp;=\dfrac{\sum_{i=-N/2}^{N/2}~\alpha_i~D_i}{\sum_{i=-N/2}^{N/2}~D_i}
\end{align}&lt;/p&gt;
&lt;p&gt;where $\alpha_0$ is the uniformly distributed angular pace, $N$ is the number of sensors, $\alpha_i$ is the angular information per pace $\alpha_i~\epsilon\left[-\frac{N}{2},\frac{N}{2}\right]$, and $D_i$ is the distance value obtained by the proximity sensors, refer to code line 18 and 139.&lt;/p&gt;
&lt;p&gt;The weight vector given by $\alpha_i$ sets the robot behaviour for each corresponding mapped sensor $\lbrace s_1,s_2,s_3,s_4,s_5,s_6\rbrace$. For the $\textit{avoider}$ is $\lbrace -3,-2,-1,1,2,3 \rbrace$, and for the $\textit{follower}$ is $\lbrace 3,2,1,-1,-2,-3 \rbrace$. Fig. 2b and Fig. 2c show an example of $\alpha_R$ with the Vector Field Histogram (VFH) for the $\textit{avoider}$ case. Refer to code line 128 and 132.&lt;/p&gt;
&lt;figure&gt;
&lt;img alt="drawing" src="https://paulomarconi.github.io/images/Foraging_Aggregation_V-rep_e-puck/Unicycle_Rebound_Search.png" width="55%"&gt;
&lt;center&gt;&lt;figcaption&gt;Fig. 2 - Unicycle model, Rebound and Search angle. &lt;a href="https://github.com/paulomarconi/Foraging_Aggregation_V-rep_e-puck/tree/master/report/tikz"&gt;[Tikz version]&lt;/a&gt; &lt;/figcaption&gt;&lt;/center&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="Search-blob/ePuck-algorithm"&gt;Search blob/ePuck algorithm&lt;a class="anchor-link" href="https://paulomarconi.github.io/blog/Foraging_Aggregation_V-rep_e-puck/#Search-blob/ePuck-algorithm"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The ePuck embedded camera on V-rep is a vision sensor that filters the RGB colours of the blobs and other ePucks. Not collected Blobs are mapped as green and collected ones as red, and the ePuck wheels are also mapped because they have green and red parts, refer to code line 97. The data of interest that this sensor outputs are the size, centroid's 2D position, and orientation of the detected objects. Therefore, when objects are detected by the camera, a simple routine finds the biggest one which is the closest relative to the ePuck, and using (6) and (7), it can be calculated the angle of attack $\alpha_C$ or $\alpha_e$ for the blobs and ePucks respectively, refer to Fig. 2d and code line 150. The orientation value is used to differentiate between objects, for blobs is $=0$ and for ePuck wheels is $\neq 0$, refer to code line 105.&lt;/p&gt;
&lt;p&gt;\begin{align}
\alpha_C &amp;amp;= \arctan \dfrac{x_b-x_o}{y_b-y_o} \tag{6}\\
\alpha_e &amp;amp;= \arctan \dfrac{x_e-x_o}{y_e-y_o} \tag{7}
\end{align}
where $(x_o,y_o)$, $(x_b,y_b)$, and $(x_e,y_e)$ are the robot, blob and another ePuck wheel relative position in the 2D image. In the Random state, either the robot is foraging but does not see any blobs or is aggregating but there is no other ePuck nearby, (6) and (7) are modified with a random value $w$ with a probability function $P$,&lt;/p&gt;
&lt;p&gt;\begin{align}
\alpha_{C_r} &amp;amp;= \alpha_C~w \tag{8}\\
\alpha_{e_r} &amp;amp;= \alpha_e~w \tag{9}
\end{align}
where $P(\lbrace w~\epsilon~\Omega:X(w)=1/3 \rbrace)$ and $\Omega=\lbrace -1,0,1 \rbrace$, refer to code line 158 and 205.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="Results-and-discussion"&gt;Results and discussion&lt;a class="anchor-link" href="https://paulomarconi.github.io/blog/Foraging_Aggregation_V-rep_e-puck/#Results-and-discussion"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;For both Scenarios, 4 Rounds of 10 trials each are simulated. Each Round has different initial positions of the robots, Fig. 3b and Fig. 3d, and each trial stops at $t=60$. In Scenario 1, Fig. 3a shows that Round 4 has the best performance because $68\%$ of the time the robot will forage between 13 and 15 blobs. For Scenario 2, Fig. 3b shows that Round 1 hast the best performance, $68\%$ of the time the swarm will forage between 37 and 39 blobs. For the Aggregation case, that is simulated only in Scenario 2 Fig. 3e and Fig. 3f, Round 2 shows the best results, $68\%$ of the time between 2 and 4 agents aggregate at some random point.&lt;/p&gt;
&lt;figure&gt;
&lt;img alt="result_a" src="https://paulomarconi.github.io/images/Foraging_Aggregation_V-rep_e-puck/result_a.png" width="50%"&gt;
&lt;img alt="result_b" src="https://paulomarconi.github.io/images/Foraging_Aggregation_V-rep_e-puck/result_b.png" width="50%"&gt;
&lt;img alt="result_c" src="https://paulomarconi.github.io/images/Foraging_Aggregation_V-rep_e-puck/result_c.png" width="50%"&gt;
&lt;center&gt;&lt;figcaption&gt;Fig. 3: Simulation results &lt;/figcaption&gt;&lt;/center&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img alt="foraging" src="https://paulomarconi.github.io/images/Foraging_Aggregation_V-rep_e-puck/foraging.gif" width="auto%"&gt;
&lt;center&gt;&lt;figcaption&gt;Trial: Scenario 2 (5 robots) - Foraging for $1 \le t \leq 60$ &lt;/figcaption&gt;&lt;/center&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img alt="aggregation" src="https://paulomarconi.github.io/images/Foraging_Aggregation_V-rep_e-puck/aggregation.gif" width="auto%"&gt;
&lt;center&gt;&lt;figcaption&gt;Trial: Scenario 2 (5 robots) - Random Aggregation for $60 \le t \leq 120$ &lt;/figcaption&gt;&lt;/center&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="Lua-code-of-the-algorithm"&gt;Lua code of the algorithm&lt;a class="anchor-link" href="https://paulomarconi.github.io/blog/Foraging_Aggregation_V-rep_e-puck/#Lua-code-of-the-algorithm"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;pre class="lang-lua line-numbers" data-jsonp="https://api.github.com/repos/paulomarconi/Foraging_Aggregation_V-rep_e-puck/contents/report/vrep.lua"&gt;&lt;/pre&gt;
&lt;h3 id="Edit-the-controller"&gt;Edit the controller&lt;a class="anchor-link" href="https://paulomarconi.github.io/blog/Foraging_Aggregation_V-rep_e-puck/#Edit-the-controller"&gt;¶&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;To edit the controller for all the ePuck, open V-rep and load the scene  &lt;code&gt;sim_5_Robots.ttt&lt;/code&gt;, and edit the ePuck file.&lt;/p&gt;
&lt;p&gt;&lt;img alt="controller_location" src="https://paulomarconi.github.io/images/Foraging_Aggregation_V-rep_e-puck/controller_location.png" width="auto"&gt;&lt;/p&gt;
&lt;h3 id="Save-the-output-data"&gt;Save the output data&lt;a class="anchor-link" href="https://paulomarconi.github.io/blog/Foraging_Aggregation_V-rep_e-puck/#Save-the-output-data"&gt;¶&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;To edit the location of the output data, open the &lt;code&gt;disc file&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="output_location" src="https://paulomarconi.github.io/images/Foraging_Aggregation_V-rep_e-puck/output_location.png" width="auto"&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="References"&gt;References&lt;a class="anchor-link" href="https://paulomarconi.github.io/blog/Foraging_Aggregation_V-rep_e-puck/#References"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;[1] Jawhar Ghommam, Maarouf Saad, and Faical Mnif. “Formation path following control of unicycle-type mobile robots”. In: 2008 IEEE International Conference on Robotics and Automation. IEEE, 2008. DOI: 10.1109/robot.2008.4543495.&lt;/p&gt;
&lt;p&gt;[2] I. Susnea et al. “The bubble rebound obstacle avoidance algorithm for mobile robots”. In: IEEE ICCA 2010. IEEE, 2010. DOI: 10.1109/icca.2010.5524302.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>aggregation</category><category>e-puck</category><category>foraging</category><category>swarm robotics</category><category>V-rep</category><guid>https://paulomarconi.github.io/blog/Foraging_Aggregation_V-rep_e-puck/</guid><pubDate>Sun, 06 Sep 2020 21:47:09 GMT</pubDate></item></channel></rss>